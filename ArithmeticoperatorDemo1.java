package com.itheima.demo3;

import java.util.Scanner;
//Java关键字

/*
 1.关键字是被Java赋予特殊含义的单词
 2.关键字字母全部小写，有特殊颜色标记
 3.class关键字：用于创建或定义一个类 类是Java最基本的组成单元
 4.文件名要和类名完全一致
 **/

//Java字面量(数据类型)

/*
 1.字面量分为 整数 小数 字符串 字符 布尔 空 6种
 2.字符串用双引号 ""
 3.字符用单引号'' 但是里面的内容只能有一个字符  像'abc'这种就是错误的
 4.布尔 只有两个值  true false
 5.空类型 null
 扩展：
 \t 制表符 ：在打印的时候把前面的字符串长度补齐到8 ，或者8的倍数，最少补一个，最多8个
 **/


//变量

/*
 1.某个数据经常会发生改变时 就使用变量保存
 格式： 数据类型 变量名 = 数据值; -> int a = 10;
 变量可以进行运算加减乘除
 2.注意事项:变量名不可以重复定义,只能存一个值,
 一条语句可以定义同类型但不同名的变量,
 变量使用前一定更要初始化也就是赋值
 注意变量的作用的范围
 **/

/*
 1.计算机存储规则
 数据都是以二进制数据存储的
 ASCII码 a - z 是97 - 122 A-Z 是 65 - 90
 灰度表 0~255 0是纯黑 255是纯白
 RGB 三原色 数值越大表示颜色越浓范围[0~255]
 声音数据 根据采样来增强音质
 **/

//数据类型
/*
 1.基本数据类型
 整数类型
 关键字  		取值范围
 byte    		-128 ~127(*注意取值范围)
 short  			-32768~32767
 int(默认)		-21亿~21亿
 long 			很大很大(*在定义long类型变量时 要在数据后面加一个L,不然会报错)
 浮点数类型
 float 			-3.4e-38~3.4e+38(*定义float类型数据时要在数据后面加一个F)
 double(默认)	-4.9e-324~4.9e+308
 字符
 char			0~65535(*字符不要和字符串弄混)
 布尔
 boolean			ture,false
 2.取值范围大小关系
 double > float >long >int >short >byte
 **/

//标识符
/*
 1.由 数字 字母 下划线(_) 和美元($)符号组成
 2.不能以数字开头
 3.不能是关键字
 4.区分大小写
 5.命名建议:由一个单词组成(变量名)时是用小写,由多个单词组成第一个单词小写
 其他单词首字母大写.
 由一个单词组成(类名)时首字母要大写,多个单词时首字母都要大写

 见名知意
 **/

//键盘录入
/*
 Scanner 类 用来接收键盘录入的数据
 1.导包 ---Scanner类在哪
 import java.util.Scanner;//定义出现在类的上面
 2.创建对象 ---使用Scanner
 Scanner sc = new Scanner(System.in);//只有sc变量名可以改变其他都不行
 3.接收数据 ---开始干活了
 int i = sc.nextInt();//只有i是变量名其他都不行
 **/

//项目 模块 包 类  创建的父子级
public class ArithmeticoperatorDemo1 {
    public static void main(String[] args) {
        //算数运算符
        /* 加减乘除*/
        System.out.println(3 + 2);
        System.out.println(5 - 1);
        System.out.println(6 * 8);
        //计算有小数参与,计算结果有可能不精确
        System.out.println(1.1 + 2.2);
        System.out.println(1.1 - 1.01);
        System.out.println(2.2 * 3.3);
        //除法
        System.out.println(10 / 2);
        System.out.println(10 / 3);//整数参与计算返回的还是整数,如果想得到小数就要在被除数 *1.0有可能是不精确的
        //取模/取余
        System.out.println(10 % 2);
        System.out.println(10 % 3);
        //应用场景:判断a是否能被b整除,判断a是否为偶数,

        //练习
        Scanner sc = new Scanner(System.in);
        System.out.println("请输入一个三位数:");
        int i = sc.nextInt();
        System.out.println("个位:" + i % 10);
        System.out.println("十位:" + i / 10 % 10);
        System.out.println("百位:" + i / 100 % 10);

        //高级用法
        /*
            数字相加
         * 不同类型的数据是不能直接运算的要转化成相同的类型运算
         * 隐式转换:取值范围小的数据转换到取值范围大的数据(程序自动转换)
         * byte short char 三种类型运算时,会先直接提升到int型,然后再运算.
                             byte a= 10;
                             byte b=20;
                             c = a+b;//c的类型为int
         * 强制转换:取值范围大的数据转换成取值范围小的数据
                   格式:目标数据类型 变量名 = (目标数据类型) 被强转的数据;
                   * 强制转换有可能导致数据发生错误
         * 取值范围大小关系
            double > float >long >int >short >byte
         *
            字符串相加
         *当"+"操作中出现字符串时就变成了拼接符,变成一个新的字符串
         *连续相加时,能计算就计算不能计算就拼接,从左到右依次运算
            字符相加
         *字符+字符 (字符+数字) 都会转换成ASCII码中的数据再运算
         * */

        //自增自减运算符
        //++和-- 无论放在变量前还是后面,单独写一行结果都是一样的
        /*
        自增运算符++
            数据加一
        自减运算符--
             数据减一
        后++:变量先使用(赋值)再进行自增
            int x =10;
            int y =x++;//y输出的结果是10,x经过自增变成11,赋值给y的值是自增前的
        先++:先自增再使用(赋值)
            int z =++x;//x先自增由11变成12,再把自增后的结果赋值给z
        */


        //赋值运算符
        //把等号右边的赋值给等号左边
        /*
        * +=
            运算规则:a+=b;/a-=b;它等同于 a=a+b;/a=a-b;
            细节:+=,-=,*=,/=,%=  运算时底层都隐藏了一个强制类型转换
                short s=1;
                s+=1;//它等同于s=(short)(s+1);


            */


        //关系运算符(用于判断,成立返回ture,不成立返回false)
            //关系运算符的结果都是boolean类型 ture false  (切记不要把"=="写成"=")
            // == ,!=,> ,< ,>= ,<=

        //逻辑运算符
        /*&:逻辑与 两边都为真,结果才是真
          |:逻辑或 两边都为假,结果才为假
          ^:逻辑异或 相同为假,不同为真
          !:逻辑非 取反
         */


        //短路运算符
        /*
        &&:会先判断其中一个是否成立,不成立直接返回false,成立后再判断后面是否成立
        ||:如果表达式左边能确定结果,右边不执行,提高效率
         */

        //三元运算符
        /*
        格式:关系表达式?表达式1:表达式2;  表达式的结果必须被使用或者是输出或者用变量接收

         */

        //运算符优先级:参考小学数学,()优先于所有

        //补充内容:
           /* byte      1个字节
              short     2个字节
              int       4个字节
              long      8个字节
            */
    }
}
